openapi: "3.0.3"
info:
  title: "com_the_chance_honey_mart API"
  description: "com_the_chance_honey_mart API"
  version: "1.0.0"
servers:
- url: "https://com_the_chance_honey_mart"
paths:
  /json/kotlinx-serialization:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /cart:
    delete:
      description: ""
      parameters:
      - name: "productId"
        in: "query"
        required: false
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CartModel"
  /cart/addProduct:
    post:
      description: ""
      parameters:
      - name: "productId"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "count"
        in: "query"
        required: false
        schema:
          type: "string"
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "string"
  /cart/deleteAll:
    delete:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /category:
    post:
      description: ""
      parameters:
      - name: "name"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "marketId"
        in: "query"
        required: false
        schema:
          type: "number"
      - name: "imageId"
        in: "query"
        required: false
        schema:
          type: "integer"
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CategoryModel"
    put:
      description: ""
      parameters:
      - name: "id"
        in: "query"
        required: false
        schema:
          type: "number"
      - name: "name"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "marketId"
        in: "query"
        required: false
        schema:
          type: "number"
      - name: "imageId"
        in: "query"
        required: false
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /category/{categoryId}:
    delete:
      description: ""
      parameters:
      - name: "categoryId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "boolean"
  /category/{categoryId}/allProduct:
    get:
      description: ""
      parameters:
      - name: "categoryId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ProductModel"
  /deleteAllTables:
    delete:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
  /files/image_uploads/{image}:
    get:
      description: ""
      parameters:
      - name: "image"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK <br> A file response"
          content:
            application/*:
              schema:
                type: "object"
                format: "binary"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "File not found"
  /markets:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/MarketModel"
    post:
      description: "TODO: authenticate for Admin only."
      parameters:
      - name: "name"
        in: "query"
        required: false
        schema:
          type: "string"
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MarketModel"
  /markets/{id}:
    delete:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "number"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
    put:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "number"
      - name: "name"
        in: "query"
        required: false
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/MarketModel"
  /markets/{id}/categories:
    get:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "number"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CategoryModel"
  /order/{id}:
    get:
      description: "get Order Details"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/OrderDetailsModel"
    put:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "state"
        in: "query"
        required: false
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "boolean"
  /order/checkout:
    post:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "boolean"
  /order/marketOrders:
    get:
      description: ""
      parameters:
      - name: "id"
        in: "query"
        required: false
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/OrderModel"
  /order/userOrders:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/OrderModel"
  /owner/login:
    post:
      description: ""
      parameters:
      - name: "email"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "password"
        in: "query"
        required: false
        schema:
          type: "string"
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "string"
  /owner/signup:
    post:
      description: ""
      parameters:
      - name: "fullName"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "email"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "password"
        in: "query"
        required: false
        schema:
          type: "string"
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "string"
  /product:
    post:
      description: ""
      parameters:
      - name: "name"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "price"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "quantity"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "categoriesId"
        in: "query"
        required: false
        schema:
          type: "string"
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ProductModel"
  /product/{id}:
    delete:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "boolean"
    put:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "name"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "price"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "quantity"
        in: "query"
        required: false
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /product/{productId}:
    get:
      description: ""
      parameters:
      - name: "productId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CategoryModel"
  /product/{id}/updateCategories:
    put:
      description: ""
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "categoriesId"
        in: "query"
        required: false
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /user/login:
    post:
      description: ""
      parameters:
      - name: "email"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "password"
        in: "query"
        required: false
        schema:
          type: "string"
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "string"
  /user/profileImage:
    get:
      description: ""
      responses:
        "302":
          description: "Found"
          content:
            '*/*':
              schema:
                type: "string"
    post:
      description: ""
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "string"
  /user/signup:
    post:
      description: ""
      parameters:
      - name: "password"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "fullName"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "email"
        in: "query"
        required: false
        schema:
          type: "string"
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "string"
  /wishList:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ProductInWishListModel"
    post:
      description: ""
      parameters:
      - name: "productId"
        in: "query"
        required: false
        schema:
          type: "string"
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "string"
  /wishList/{productId}:
    delete:
      description: ""
      parameters:
      - name: "productId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
components:
  schemas:
    ProductInCartModel:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        count:
          type: "integer"
          format: "int32"
        price:
          type: "number"
          format: "double"
    CartModel:
      type: "object"
      properties:
        products:
          type: "array"
          items:
            $ref: "#/components/schemas/ProductInCartModel"
        total:
          type: "number"
          format: "double"
    CategoryModel:
      type: "object"
      properties:
        categoryId:
          type: "integer"
          format: "int64"
        categoryName:
          type: "string"
        imageId:
          type: "integer"
          format: "int32"
    ProductModel:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        quantity:
          type: "string"
        price:
          type: "number"
          format: "double"
    MarketModel:
      type: "object"
      properties:
        marketId:
          type: "integer"
          format: "int64"
        marketName:
          type: "string"
    ProductInOrderModel:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        count:
          type: "integer"
          format: "int32"
        price:
          type: "number"
          format: "double"
    OrderDetailsModel:
      type: "object"
      properties:
        orderId:
          type: "integer"
          format: "int64"
        userId:
          type: "integer"
          format: "int64"
        marketId:
          type: "integer"
          format: "int64"
        products:
          type: "array"
          items:
            $ref: "#/components/schemas/ProductInOrderModel"
        totalPrice:
          type: "number"
          format: "double"
        date:
          type: "string"
        state:
          type: "integer"
          format: "int32"
    OrderModel:
      type: "object"
      properties:
        orderId:
          type: "integer"
          format: "int64"
        totalPrice:
          type: "number"
          format: "double"
        state:
          type: "integer"
          format: "int32"
        date:
          type: "integer"
          format: "int64"
    ProductInWishListModel:
      type: "object"
      properties:
        productId:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        price:
          type: "number"
          format: "double"